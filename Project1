% Load the dataset
data = readtable('Project1DataSetEENG415.xlsx');

% Handle missing values
% Replace missing numeric values with the median of their respective columns
for i = 1:width(data)
    if isnumeric(data{:,i})
        colMedian = median(data{:,i}, 'omitnan');
        data{:,i}(isnan(data{:,i})) = colMedian;
    end
end

% Remove duplicates
data = unique(data);

% Invert specific attributes to ensure higher values indicate higher vulnerability
attributesToInvert = {'Household median income', 'Bachelor Degrees', 'Employed', 'High School/GED', 'Doctorate', 'White'};
for i = 1:length(attributesToInvert)
    attr = attributesToInvert{i};
    if any(strcmp(data.Properties.VariableNames, attr))
        data{:,attr} = max(data{:,attr}) + 1 - data{:,attr};
    end
end

% Normalize the data (MinMax scaling)
for i = 1:width(data)
    if isnumeric(data{:,i})
        data{:,i} = (data{:,i} - min(data{:,i})) / (max(data{:,i}) - min(data{:,i}));
    end
end

% Display the first few rows of the cleaned and processed dataset
disp(data)

% Assuming 'data' is your table
% Step 1: Select only numeric columns
numericData = data(:, varfun(@isnumeric, data, 'OutputFormat', 'uniform'));

% Step 2: Convert the table of numeric data to a numeric matrix
numericMatrix = table2array(numericData);

% Now you can apply PCA on numericMatrix
[coeff, score, latent, tsquared, explained, mu] = pca(numericMatrix);

% Followed by your PCA analysis and plotting


% Apply PCA
%[coeff, score, latent, tsquared, explained, mu] = pca(data);

% Calculate cumulative variance
cumulativeVariance = cumsum(explained);

% Find the number of components explaining 85-90% of the variance
nComponents85 = find(cumulativeVariance >= 85, 1, 'first');
nComponents90 = find(cumulativeVariance >= 90, 1, 'first');

% Total number of principal components
totalComponents = size(coeff, 2);

% Plotting
figure;
plot(1:length(explained), cumulativeVariance, '-o');
xlabel('Number of Components');
ylabel('Cumulative Explained Variance (%)');
title('PCA - Cumulative Explained Variance');
grid on;
hold on;
line([nComponents85 nComponents85], [0 85], 'Color', 'red', 'LineStyle', '--');
line([nComponents90 nComponents90], [0 90], 'Color', 'green', 'LineStyle', '--');
legend('Cumulative Variance', '85% Variance', '90% Variance');
hold off;

% Display the results
fprintf('Total number of principal components: %d\n', totalComponents);
fprintf('Number of components for 85%% variance: %d\n', nComponents85);
fprintf('Number of components for 90%% variance: %d\n', nComponents90);

score = score(:, 1:nComponents90);

% Compute vulnerability v for each tract
vulnerabilityScores = sum(score, 2);

% Calculate the mean (μ) and standard deviation (σ) of the computed vulnerabilities
meanVulnerability = mean(vulnerabilityScores);
disp(meanVulnerability);
stdVulnerability = std(vulnerabilityScores);
disp(stdVulnerability);

% Initialize a new column for vulnerability rank
vulnerabilityRank = strings(size(vulnerabilityScores));

% Assign rankings based on the value v of its vulnerability
vulnerabilityRank(vulnerabilityScores < meanVulnerability - 2*stdVulnerability) = "very low";
vulnerabilityRank(vulnerabilityScores >= meanVulnerability - 2*stdVulnerability & ...
                  vulnerabilityScores < meanVulnerability - stdVulnerability) = "low";
vulnerabilityRank(vulnerabilityScores >= meanVulnerability - stdVulnerability & ...
                  vulnerabilityScores < meanVulnerability + stdVulnerability) = "average";
vulnerabilityRank(vulnerabilityScores >= meanVulnerability + stdVulnerability & ...
                  vulnerabilityScores < meanVulnerability + 2*stdVulnerability) = "high";
vulnerabilityRank(vulnerabilityScores >= meanVulnerability + 2*stdVulnerability) = "very high";

%disp(data.Properties.VariableNames)

% Create a table with the tracts, their vulnerability scores, and ranks
tractsVulnerability = table(data.('CensusTractID_'), vulnerabilityScores, vulnerabilityRank, ...
                            'VariableNames', {'Census Tract', 'Vulnerability Score', 'Vulnerability Rank'});

% Sort the table by vulnerability score in descending order
sortedTractsVulnerability = sortrows(tractsVulnerability, 'Vulnerability Score', 'descend');
disp(sortedTractsVulnerability);
% Get the top 5 most vulnerable tracts
top5VulnerableTracts = sortedTractsVulnerability(1:5, :);

% Display the top 5 most vulnerable tracts
disp(top5VulnerableTracts);

% Assuming 'sortedTractsVulnerability' is your table and 'Census Tract' is the column you want to modify
for i = 1:height(sortedTractsVulnerability)
    % Extract the current value
    currentTract = sortedTractsVulnerability.('Census Tract'){i};
    
    % Remove non-numeric parts of the string
    numericTract = regexprep(currentTract, '[^\d.]+', '');
    
    % Convert the numeric string to an actual number
    numericValue = str2double(numericTract);
    
    % Update the table, converting the numeric value back to a cell
    sortedTractsVulnerability.('Census Tract')(i) = {numericValue};
end

% Display the updated table to check the results
disp(sortedTractsVulnerability);




% Load the shapefile for census tracts
S = shaperead('tl_2020_08031_tract20.shp');
%disp(S);

% Create a figure
figure;
% disp(['Processing Tract: ', num2str(S(100).TRACTCE20)]);
% disp(['X Coordinates: ', num2str(S(i).X(1))]);  % Display first X coordinate as a sample
% disp(['Y Coordinates: ', num2str(S(i).Y(1))]);  % Display first Y coordinate as a sample

% Loop through each tract in the shapefile
for i = 1:length(S)
    % Convert the tract ID in the shapefile to a number, in case it's a string
    tractID = str2double(S(i).TRACTCE20);

    % Find the corresponding vulnerability rank in your data
    for j = 1:height(sortedTractsVulnerability)
        if i == 2, 20, 21, 22, 32, 38, 41, 71, 74, 77, 79, 81, 84, 87, 89, 90, 93, 136, 137, 138, 142, 145, 152
            color = [1, .5, 0];
            geoshow(S(i).Y, S(i).X, 'DisplayType', 'polygon', 'FaceColor', color);
            break; % Break the loop once a match is found
        end
        % Convert the cell to a numeric value for comparison
        dataTractID = cell2mat(sortedTractsVulnerability{j, 'Census Tract'}) * 100;

        if (tractID == dataTractID)
            disp(i);
            % Extract the vulnerability rank
            rank = sortedTractsVulnerability{j, 'Vulnerability Rank'}{1};

            % Assign a color based on the vulnerability rank
            switch rank
                case 'very low'
                    color = [0, 1, 0]; % Green
                case 'low'
                    color = [0.5, 1, 0]; % Lighter Green
                case 'average'
                    color = [1, 1, 0]; % Yellow
                case 'high'
                    color = [1, 0.5, 0]; % Orange
                case 'very high'
                    color = [1, 0, 0]; % Red
                otherwise
                    color = [1, 1, 1]; % White for undefined ranks
            end

            % Plot the tract with the assigned color
            geoshow(S(i).Y, S(i).X, 'DisplayType', 'polygon', 'FaceColor', color);
            break; % Break the loop once a match is found
        end
        
    end
end

% Customize the map
title('Vulnerability Map');
xlabel('Longitude');
ylabel('Latitude');
grid on;
hold off;





